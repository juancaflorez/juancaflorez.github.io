<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Juan</title><description>Technical Artist</description><link>https://juancaflorez.github.io/</link><language>en-us</language><item><title>Terrain Solver</title><link>https://juancaflorez.github.io/long_form/terrain_solver/</link><guid isPermaLink="true">https://juancaflorez.github.io/long_form/terrain_solver/</guid><description>An alternative approach to solving features in a terrain</description><pubDate>Thu, 15 Aug 2024 17:18:14 GMT</pubDate><content:encoded>&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;Let us explore the topic of terrain generation, with a particular focus on the tools designed to create expansive landscapes. Many of these tools operate on a shared foundational principle: the use of a single dimension to represent elevation. This approach is commonly employed in software such as Houdini.&lt;/p&gt;
&lt;p&gt;However, this method encounters significant limitations when applied to terrains with extreme height variations. Features such as cliffs and canyons often become distorted, losing their intended form and detail.&lt;/p&gt;
&lt;p&gt;This project is dedicated to addressing these limitations. Its primary objective is to improve the accuracy and fidelity of terrain generation in areas where conventional methods prove inadequate.&lt;/p&gt;
&lt;h1&gt;Problem&lt;/h1&gt;
&lt;p&gt;Let’s consider the terrain in the image below. This height field began its life in Houdini and was then exported to Gaea for some fine-tuning. Here’s where the issues start to emerge. In the cliff areas the detail is lost. The traditional fix would involve either filling these problem areas with pre-made rocks from a library or manually sculpting the meshes to match the desired topology of the landscape.&lt;/p&gt;
&lt;p&gt;Both methods come with their own set of challenges. Relying on a library of assets—like Megascans can be restrictive, as those assets might not always align with the production&apos;s art style. Plus, using the same rocks across a large area can lead to noticeable repetition. On the other hand, having environment artists sculpt custom assets from scratch is time-consuming and can become costly, especially if the production undergoes frequent changes.&lt;/p&gt;
&lt;p&gt;While browsing SideFX&apos;s features page, I came across someone who shared the same frustrations. Inspired by their approach&lt;a href=&quot;https://www.sidefx.com/hydra-studios/&quot;&gt;^1&lt;/a&gt;, I decided to tackle the issue myself and implement my own solution following their approach.&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/images/trp_solver_problem.avif&quot;
alt=&quot;some&quot;
format=&quot;avif&quot;
/&amp;gt;&lt;/p&gt;
&lt;h1&gt;Shapes and Time&lt;/h1&gt;
&lt;p&gt;Just as in the erosion processes modeled with Houdini&apos;s landscape operators, this tool is a solver, and the shapes evolve over time based on their previous state.
At the beginning the setup of the process involves setting a base resolution of the mesh, a target density resolution and the time the simulation will take.&lt;/p&gt;
&lt;p&gt;The rock shapes are modeled from a simple voronoise function layered with many other noise functions. These functions can be animated during the simulation to alter the growth shape.&lt;/p&gt;
&lt;p&gt;Additionally there are functions to push the edges towards the most prominent features or towards areas with a steep change in the curvature. This push has the effect of making the shapes more sharp and defined.&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/sequences/trp_features_a.avif&quot;
alt=&quot;features development with erosion&quot;
format=&quot;avif&quot;
/&amp;gt;&lt;/p&gt;
&lt;h1&gt;Erosion for Steep Areas&lt;/h1&gt;
&lt;p&gt;This solver takes also the results from Houdini&apos;s terrain erosion, and uses areas marked as soil or rock to run a custom hydraulic erosion solver that runs over the 3d geometry to create weathering effects. (Unlike Houdini&apos;s stock erosion operators)&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/sequences/trp_features_b.avif&quot;
alt=&quot;features development with erosion&quot;
format=&quot;avif&quot;
/&amp;gt;&lt;/p&gt;
&lt;p&gt;On a larger scale, the erosion of the soil can also reveals more areas that become a target for rock growth.&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/sequences/trp_rk_rockmap.avif&quot;
alt=&quot;some&quot;
format=&quot;avif&quot;
/&amp;gt;&lt;/p&gt;
&lt;p&gt;The erosion also can transport material by moving soil material downwards, following the path of water flow, leaving behind deposits of rock and debris.&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/sequences/trp_maps_evolution.avif&quot;
alt=&quot;some&quot;
format=&quot;avif&quot;
/&amp;gt;&lt;/p&gt;
&lt;h1&gt;Technical Bits&lt;/h1&gt;
&lt;p&gt;In this solver the domain geometry is remeshed in each frame, increasing the detail as the time advances.
To keep the shape of the rocks independent from the resolution, a &lt;strong&gt;&quot;rock map&quot;&lt;/strong&gt; is calculated each frame.
At the core of this rock map is a voronoi function with accurate edge distance calculation and ids output.
This function was adapted from Inigo Quiles article on accurate voronoi edge distances&lt;a href=&quot;https://iquilezles.org/articles/voronoilines/&quot;&gt;^2&lt;/a&gt; with a few modifications to make the code
more readable.&lt;/p&gt;
&lt;p&gt;import MasonryLayout from &apos;../../../components/Masonry.astro&apos;;&lt;/p&gt;
&lt;p&gt;&amp;lt;MasonryLayout images={[
{ src: &quot;/assets/images/trp_solver_hydro.avif&quot;, alt: &quot;water paths&quot; },
{ src: &quot;/assets/images/trp_solver_weights.avif&quot;, alt: &quot;direction weights&quot; },
{ src: &quot;/assets/images/trp_solver_rmap.avif&quot;, alt: &quot;rock map core&quot; },
{ src: &quot;/assets/images/trp_solver_voro.avif&quot;, alt: &quot;custom voronoise with correct distance&quot; },
]} /&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Water paths from gradient descent&lt;/li&gt;
&lt;li&gt;Random feature growth direction using each voronoi site seed&lt;/li&gt;
&lt;li&gt;Rocks map VOP&lt;/li&gt;
&lt;li&gt;The core of the solver is a custom voronoi function implemented in VEX, it provides accurate edge distances&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;The output from this terrain solver provides data that can be used not only for applying base colors to the geometry&apos;s vertices but also for creating tagged areas that kickstart the texturing process.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Footnotes&lt;/h1&gt;
</content:encoded><author>Juan</author></item><item><title>Terrain Texture Generation</title><link>https://juancaflorez.github.io/long_form/terrain_tex/</link><guid isPermaLink="true">https://juancaflorez.github.io/long_form/terrain_tex/</guid><description>Albedo map generation for a terrain solver</description><pubDate>Fri, 31 Jan 2025 19:18:14 GMT</pubDate><content:encoded>&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;This texturing workflow expands on the previous work of creating a custom &lt;a href=&quot;/long_form/terrain_solver&quot;&gt;terrain solver&lt;/a&gt;. Here I will outline my general strategy to create proper UV coordinates for and asset with over 4M triangles. Afterwards, I will cover the generation of a pigmentation map used to build an albedo map. As a last step I will cover how the use of masks to automate some parts of the texturing process using Houdini and Marmoset. The idea is to &lt;strong&gt;prepare&lt;/strong&gt; the model and deliver the asset to an artist so they can continue the texturing process.&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/images/trp_solver_ao.avif&quot;
alt=&quot;features development with erosion&quot;
format=&quot;avif&quot;
width=&quot;1080&quot;
/&amp;gt;&lt;/p&gt;
&lt;h1&gt;Texture Mapping Coordinates Strategy&lt;/h1&gt;
&lt;p&gt;There is already software specialized&lt;a href=&quot;%5BRizomuv-vs%5D(https://www.rizom-lab.com/rizomuv-vs/)&quot;&gt;^1&lt;/a&gt; in the creation of UV coordinates for meshes with a high polygon count. But for the sake of reducing complexity I am doing as much work inside Houdini. To handle the creation of the UVs on these meshes my strategy consists of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Poly reduce geometry preserving the most important features, masking areas of high curvature for detail preservation [^2]&lt;/li&gt;
&lt;li&gt;Create UVs using clusters and a breadth search to cover the entire surface, using clusters&lt;/li&gt;
&lt;li&gt;Transfer UVs to the original high resolution geometry&lt;/li&gt;
&lt;li&gt;Bake all the maps and masks created by the terrain solver&lt;/li&gt;
&lt;li&gt;Export to Marmoset/Substance using a custom python script&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/images/trp_terrain_uvs.png&quot;
alt=&quot;uvs strategy&quot;
format=&quot;png&quot;
/&amp;gt;&lt;/p&gt;
&lt;p&gt;In the image above an operator distributes a number of points over the surface of the mesh, the user can paint or manipulate the boundaries of the uv shell to get an approximated shape, after a solver expands the boundaries of the each shell, this search is made over a low resolution mesh. Finally the uvs are created and transferred to the high resolution mesh.&lt;/p&gt;
&lt;h1&gt;Problem&lt;/h1&gt;
&lt;p&gt;Using plain masks and triplanar shaders is a starting point, but the result can become repetitive. Here is a test of just using one material input without any pigmentation or color variation on top of the projected material.&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/images/trp_tsolver_unreal.avif&quot;
alt=&quot;features development with erosion&quot;
format=&quot;avif&quot;
width=&quot;1080&quot;
/&amp;gt;&lt;/p&gt;
&lt;h1&gt;Masks and Strokes&lt;/h1&gt;
&lt;p&gt;Taking advantage of the extra data generated by the terrain solver, a color map is generated to enhance the albedo texture.
&amp;lt;img
src=&quot;/assets/sequences/trp_terrain_tex.avif&quot;
alt=&quot;features development with erosion&quot;
format=&quot;avif&quot;
width=&quot;1080&quot;
/&amp;gt;&lt;/p&gt;
&lt;p&gt;In this example strokes are generated following the direction of the erosion map, afterwards they are clustered by color variation and rasterized into a single texture map.&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/sequences/trp_strokes_npr.avif&quot;
alt=&quot;features development with erosion&quot;
format=&quot;avif&quot;
width=&quot;1080&quot;
/&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/images/trp_solver_tx_albedo.avif&quot;
alt=&quot;features development with erosion&quot;
format=&quot;avif&quot;
width=&quot;1080&quot;
/&amp;gt;&lt;/p&gt;
&lt;h1&gt;Other Technical Bits&lt;/h1&gt;
&lt;h2&gt;Copernicus and Texture Blending&lt;/h2&gt;
&lt;p&gt;As an example for a more photorealistic asset I created 5 triplanar mapped materials.
The textures for these materials were re-mixed using content from FAB/Bridge. The process consist of blending two height maps and using the result as a mask to blend all the other channels, like: albedo, specular, etc...&lt;/p&gt;
&lt;p&gt;The blending of the was done using Copernicus with a custom but simple &lt;a href=&quot;https://juanflorez.codeberg.page/reference/houdini/cops/custom-ops/&quot;&gt;OpenCL node&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&quot;/assets/sequences/trp_tsolver_txopencl.avif&quot;
alt=&quot;features development with erosion&quot;
format=&quot;avif&quot;
width=&quot;1080&quot;
/&amp;gt;&lt;/p&gt;
&lt;p&gt;To avoid manually exporting each map manually a basic TOP network was used to automate the process&lt;/p&gt;
&lt;h1&gt;Footnotes&lt;/h1&gt;
&lt;p&gt;[^2]: The geometry is decimated using a procedure similar to &lt;a href=&quot;https://vimeo.com/420671078&quot;&gt;Embark&apos;s&lt;/a&gt; one click photogrammetry tool&lt;/p&gt;
</content:encoded><author>Juan</author></item></channel></rss>